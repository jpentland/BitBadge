var async = require('async')
var utils = require('ethereumjs-util')
var account = require('ethereumjs-account')
var rlp = require('rlp')
var SHA3Hash = require('sha3').SHA3Hash
var levelup = require('levelup')

var accountAddress = 'cd2a3d9f938e13cd947ec05abc7fe734df8dd826'
var accountKey = 'cow'
var contractWithLog = '60606040525b60405180807f6173646600000000000000000000000000000000000000000000000000000000815260200150600401905060405180910390a05b600a80604c6000396000f30060606040526008565b00'

var vm, account

async.series([
  createVM,
  watchLog,
  createAccount.bind(null, accountAddress),
  sendTxWithContract,
  printVM
], function(err) {
  if (err) console.error(err)
  else console.log('done!')
})

function createVM(cb) {
  var blockDB = levelup('', { db: require('memdown') })
  var detailsDB = levelup('/does/not/matter', { db: require('memdown') })
  
  blockchain = new Ethereum.Blockchain(blockDB, detailsDB)

  vm = new Ethereum.VM(new Ethereum.Trie(), blockchain)
  cb(null)
}

function createAccount(address, cb) {
  account = new Ethereum.Account()
  account.balance = 'f00000000000000001'
  vm.trie.put(new Buffer(address, 'hex'), account.serialize(), cb)
}

function sendTx(cb) {
  var tx = new Ethereum.Transaction()
  tx.to = new Buffer('cd2a3d9f938e13cd947ec05abc7fe734df8dd825', 'hex')
  tx.value = 1000000
  tx.sign(new Buffer(sha3(accountKey), 'hex'))
  var block = new Ethereum.Block({
    header: {
      coinbase: new Buffer(accountAddress, 'hex'),
      gasLimit: 1000000000,
      number: 0,
      timestamp: new Buffer(pad(Date.now().toString(16)), 'hex')
    },
    transactions: [ tx.serialize() ],
    uncleHeaders: []
  })
  vm.runBlock({ block: block, blockchain: blockchain, gen: true }, cb)
}

function sendTxWithContract(cb) {
  var tx = new Ethereum.Transaction()
  tx.data = contractWithLog
  tx.gasLimit = 1000000000
  tx.gasPrice = 1000000000
  tx.sign(new Buffer(sha3(accountKey), 'hex'))
  vm.runTx({ tx: tx }, cb)
}

function printVM(cb) {
  var stream = vm.trie.createReadStream()
  stream.on('data', function(data) {
    var account = new Ethereum.Account(data.value)
    account.getCode(vm.trie, function(err, code) {
      console.log(data.key.toString('hex') + ' => ' + code.toString('hex'))
      readStorage(account)
    })
    function readStorage(raw) {
      if (raw.stateRoot.toString('hex') === this.SHA3_RLP_NULL)
        return
      
      var strie = vm.trie.copy()
      strie.root = raw.stateRoot
      var stream = strie.createReadStream()
      stream.on('data', function(data) {
        console.log(data.key.toString('hex') + ' ==> ' + rlp.decode(data.value).toString('hex'))
      })
    }
  })
}

function watchLog(cb) {
  vm.logReadStream().on('data', function(data) {
    console.log(data)
  })
  cb(null, vm)
}

function sha3(str) {
  var sha = new SHA3Hash(256)
  sha.update(str)
  return sha.digest('hex')
}

function pad(str) {
  return str.length % 2 === 0 ? str : '0' + str
}
